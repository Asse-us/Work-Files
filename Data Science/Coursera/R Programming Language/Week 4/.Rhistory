{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[!(data["State"] == state),Column.name]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- data[Column.Data == min.Mortaility,"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
state  <- "TX"
state.Data  <- data[!(data["State"] == state),Column.name]
state.Data
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
Column.Data  <- data[!(data[Column.name] == "Not Available") && (data["State"] == state),,Column.name]
state.Data  <- data[(data["State"] == state),Column.name]
head(state.Data)
state.Data  <- data[(data["State"] == state)]
head(state.Data)
state.Data  <- data[(data["State"] == state),]
head(state.Data)
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
Column.Data
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- data[Column.Data == min.Mortaility,"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- state.Data[state.Data == min.Mortaility,"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
#print("Printing min.Mortaility")
#print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- state.Data[state.Data[Column.name] == min.Mortaility,"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
state.Data[Column.name]
All.Hospitals.With.Min.Mortaility  <- state.Data[state.Data[Column.name] == min.Mortaility,"Hospital.Name"]
All.Hospitals.With.Min.Mortaility  <- state.Data[(state.Data[Column.name] == min.Mortaility),"Hospital.Name"]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available")]
final.Data
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[,Column.name] == min.Mortaility,"Hospital.Name"]
final.Data[Column.name]
final.Data[[Column.name]]
final.Data
final.Data[,Column.name]
state.Data
state.Data[state.Data[Column.name] == min.Mortaility),"Hospital.Name"]
state.Data[state.Data[Column.name] == min.Mortaility,"Hospital.Name"]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
min.Mortaility  <- sort(Column.Data)[1]
hos <- state.Data[!(state.Data[Column.name] == min.Mortaility),Column.name]
hos <- state.Data[!(state.Data[Column.name] == min.Mortaility),Column.name]
data  <- read.csv("outcome-of-care-measures.csv")
?data
?read.csv
data  <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = False)
state.Data  <- data[(data["State"] == state),]
Column.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),Column.name]
Column.Data
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available")]
final.Data
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
final.Data
Column.Data  <- final.Data[,Column.name]
Column.Data
final.Data[Column.name] == min.Mortaility
final.Data[Column.name] == as.string(min.Mortaility)
final.Data[Column.name] ==  as.character(min.Mortaility)
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = False)
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
#print("Printing min.Mortaility")
#print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
data  <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = False)
getwd()
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv", stringsAsFactors = False)
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
#print("Printing min.Mortaility")
#print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
data  <- read.csv("outcome-of-care-measures.csv")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
#print("Printing min.Mortaility")
#print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
#print("Printing All.Hospitals.With.Min.Mortaility")
#print(All.Hospitals.With.Min.Mortaility)
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
#print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
#print(sortedColumn)
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
print("Printing All.Hospitals.With.Min.Mortaility")
print(sort(All.Hospitals.With.Min.Mortaility))
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
print(sort(Column.Data))
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
print("Printing All.Hospitals.With.Min.Mortaility")
print(sort(All.Hospitals.With.Min.Mortaility))
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("TX", "heart attack")
best("ABC", "heart attack")
best("NY", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
print(sort(Column.Data))
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
print("Printing All.Hospitals.With.Min.Mortaility")
print(sort(All.Hospitals.With.Min.Mortaility))
sort(All.Hospitals.With.Min.Mortaility)[1]
}
getColumnName  <- function (variable)
{
lower.Mortality  <- "Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from."
variable  <- tolower(variable)
#print(variable)
if (variable == "pneumonia")
{
lower.Mortality  <-  paste(lower.Mortality, "Pneumonia" ,sep = "", collapse = "")
}
else if (variable =="heart attack")
{
lower.Mortality  <-  paste(lower.Mortality, "Heart.Attack",sep = "", collapse = "")
}
else if (variable == "heart failure")
{
lower.Mortality  <-  paste(lower.Mortality,  "Heart.Failure",sep = "", collapse = "")
}
else
{
lower.Mortality  <-  "Invalid Column"
}
#print(lower.Mortality)
lower.Mortality
}
validateValue  <- function ( Column.name, variable.Value, data)
{
is.Valid  <- TRUE
Column.Data  <- data[[Column.name]]
actual.variable.Value  <- Column.Data[Column.Data == variable.Value]
length.actual.variable.Value  <- length(actual.variable.Value)
if (length.actual.variable.Value < 1)
{
is.Valid  <- FALSE
}
is.Valid
}
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
data  <- read.csv("outcome-of-care-measures.csv", as.is = TRUE)
best <- function(state, outcome) {
## Read outcome data
data  <- read.csv("outcome-of-care-measures.csv", as.is = TRUE)
## Check that state and outcome are valid
is.valid.state  <- validateValue("State", state,data)
if (is.valid.state == FALSE)
{
stop("Invalid State")
}
Column.name  <- getColumnName(outcome)
# Find whether this value is valid or not
if (Column.name == "Invalid Column")
{
stop("Invalid Outcome")
}
print("Printing Column Name")
print(Column.name)
## Return hospital name in that state with lowest 30-day death
state.Data  <- data[(data["State"] == state),]
final.Data  <- state.Data[!(state.Data[Column.name] == "Not Available"),]
Column.Data  <- final.Data[,Column.name]
#print("Printing Head for Column data")
#print("------------------Column Data ------------------")
#print(Column.Data)
print("------------------Printing sorted data------------------")
#sortedColumn  <- sort(Column.Data)
print(sort(Column.Data))
min.Mortaility  <- sort(Column.Data)[1]
print("Printing min.Mortaility")
print(min.Mortaility)
All.Hospitals.With.Min.Mortaility  <- final.Data[final.Data[Column.name] == as.character(min.Mortaility),"Hospital.Name"]
print("Printing All.Hospitals.With.Min.Mortaility")
print(sort(All.Hospitals.With.Min.Mortaility))
sort(All.Hospitals.With.Min.Mortaility)[1]
}
best("NY", "hert attack")
best("MD", "pneumonia")
best("NY", "hert attack")
best("TX", "heart failure")
